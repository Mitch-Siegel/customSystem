asm
{
    #include "CPU.asm"
    entry code
    code:
    push $20
    call firstnfibs
    hlt
};

fun firstNfibs(var n){
    var *fibarr = 1000;
    *fibarr = 0;
    *(fibarr + 1) = 1;

    var i = 2;
    while(i < n){
        *(fibarr + i) = *(fibarr + i - 1) + *(fibarr + i - 2);
        i = i + 1;
    }    

}

/*
// this function computes the nth fibonacci number 
fun fib(var n)
{
    if(n < 2)
        return n;
    else
        return fib(n - 1) + fib(n - 2); 
}

// find all fibonacci numbers up to and including n
fun firstnfibs(var n)
{
    var i = 0;
    while(i < n)
    {
        var result = fib(i + 1);
        asm
        {
            out (result)
        };
        i = i + 1;
    }
}
*/


/*
// software modulo! (are you having fun yet?)
fun modulo(var a, var b)
{
    while(a >= b)
    {
        a = a - b;
    }
    return a;
}

// return whether or not a number is prime
fun isPrime(var n)
{
    var i = 2;
    while(i < n)
    {
        var result = modulo(n, i);
        if(result == 0)
            return 0;

        i = i + 1;
    }
    return 1;
}

fun firstNPrimes(var n)
{
    var i = 2;
    var foundNum = 0;
    while(foundNum < n)
    {
        var result = isPrime(i);
        if(result == 1)
        {
            asm
            {
                out %r2
            };
            foundNum = foundNum + 1;
        }
        i = i + 1;
    }
}

fun firstNeverything(var n){
    firstnfibs(n);
    firstNPrimes(n);
}
*/
$$