asm
{
    #include "CPU.asm"
    entry code
code:
    add %r0, $1
    cmp %r0, $20
    jg code_done
    push %r0
    call fib
    out %rr
    jmp code;
code_done:
    hlt
};


fun fib(var i){
    var result;
    var x = 1;
    var y = 2;
    var z = 3;
    
    if(i < 2){
        if(i < 1){
            result = 0;
        }else{
            result = 1;
        }
    }else{
        result = fib(i - 2) + fib(i - 1);
    }
    x = x;
    y = y;
    z = z;
    return result;   
}

/*
// compute the first n fibonacci numbers (using pointers!)
fun firstnfibs(var n){
    var *fibarr = 1000;
    *fibarr = 0;
    *(fibarr + 1) = 1;
    var j;

    var i = 2;
    while(i <= n){
        j = *(fibarr + i - 1) + *(fibarr + i - 2);
        asm{
            out [j]
        };
        *(fibarr + i) = j;
        i = i + 1;
    }
}
*/

/*
fun firstkprimes(){
    var *primes = 1000;
    var i = 2;
    while(i <= 10000){
        if(*(primes + i) == 0){
            var j = i;
            while(j <= 10000){
                *(primes + j) = 1;
                j = j + i;
            }
            asm{
                out [i]
            };
        }
        i = i + 1;
    }
}
*/


$$
