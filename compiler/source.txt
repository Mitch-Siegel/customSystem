asm
{
    #include "CPU.asm"
    entry code
    data@ data
code:
    push $256
    call testtest
code_done:
    hlt
};

fun print(var i){
    asm{
        out %r0
    };
}

fun testtest(){
    var one = 1;
    var two = 2;
    var three = 3;
    test(one, two, three);
}

fun test(var arg1, var arg2, var arg3){
    print(arg1);
    print(arg2);
    print(arg3);
}



fun setBlockAllocated(var *blkPtr, var size){
    print(size);
    print(blkPtr);
    *(blkPtr - 3) = 1; // allocated flag in header
    *(blkPtr - 2) = size; // size flag in header
}

fun setBlockNext(var *blkPtr, var *next){
    *(blkPtr - 1) = next;
}

fun mm_init(var size){
    var *dataAt = 2;
    var *blkPtr = (*dataAt) + 6;
    var newSize = size - 6;
    print(newSize);
    setBlockAllocated(blkPtr, newSize);
    var zero = 0;
    setBlockNext(blkPtr, zero);
}
/*
fun mm_malloc(var size){
    var *dataAt = 2;
    var blkRunner = (*dataAt) + 6;
}*/


$$
