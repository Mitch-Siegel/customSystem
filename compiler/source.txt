asm
{
    #include "CPU.asm"
    entry code
code:
    push $20
    call fib
    ;call firstkprimes
code_done:
    hlt
};

fun print(var i){
    var j = i;
    asm{
        out %r1
    };
}


fun fib(var n){
    var *fibarr = 512;
    *fibarr = 0;
    *(fibarr + 1) = 1;
    var j;
    var i = 2;

    while(i <= n){
        j = *(fibarr + i - 1) + *(fibarr + i - 2);
        *(fibarr + i) = j;
        i = i + 1;
    }
    i = 1;
    while(i <= n){
        print(*(fibarr + i));
        i = i + 1;
    }
}



/*
// compute the first n fibonacci numbers (using pointers!)
fun firstnfibs(var n){
    var *fibarr = 1000;
    *fibarr = 0;
    *(fibarr + 1) = 1;
    var j;

    var i = 2;
    while(i <= n){
        j = *(fibarr + i - 1) + *(fibarr + i - 2);
        asm{
            out [j]
        };
        *(fibarr + i) = j;
        i = i + 1;
    }
}
*/

/*
fun firstkprimes(){
    var *primes = 1000;
    var i = 2;
    var j;
    while(i <= 10000){
        if(*(primes + i) == 0){
            j = i;
            while(j <= 10000){
                *(primes + j) = 1;
                j = j + i;
            }
            print(i);
        }
        i = i + 1;
    }
    i = i;
    j = j;
    var k = i + j;
}
*/




$$
