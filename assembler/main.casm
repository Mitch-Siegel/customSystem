#include "CPU.asm"
entry code

string:
#d "hello\0" 

code:
    ;inc %r1
    ;cmp %r1, $10
    ;jg halt
    ;push %r1
    ;call fibb
    ;out %r0
    ;jmp code
    push $2
    call double
    push %r0
    call double
halt:
    hlt


fibb:
    push %r1
    push %r2
    movw %r1, 4(%bp)
    movw %r0, %r1
    cmp %r0, $2
    jl fibbdone
    sub %r0, $2
    push %r0
    call fibb
    movw %r2, %r1
    sub %r2, $1
    push %r2
    movw %r1, %r0
    call fibb
    add %r0, %r1
    
fibbdone:
    pop %r2
    pop %r1
    ret 1


double:
    push %r1
    movw %r0, 4(%bp)
    movw %r1, %r0
    add %r1, %r1
    movw %r0, %r1
    pop %r1
    ret 1  





;movw 0, %rd
;code1:
;movb 128, %di
;movw %rd, %ra
;;call fakefunc
;call fibb
;;push %ra
;inc %rd
;cmp $100, %rd
;jg code1
;
;hlt
;
;
;
;fibb:
;push %rb
;push %rc
;push %rd
;push %r0
;
;movw %ra, %rd ;put arg1 in rd
;movb 0, %ra     ; zero ra
;movb %ra, %rc   ; zero rc (count)
;movb %ra, %r0   ; zero r0 (array index)
;movb 1, %rb     ; initialize rb to 1
;fibb1:
;add %rb, %ra    ; a += b
;cmp %rd, %ra    ; if a > maxval, jump out
;jl fibb2  
;push %ra
;inc %rc         ; else, count++
;add %ra, %rb    ; b += a       
;cmp %rd, %rb    ; if b > maxval, jump out
;jl fibb2
;push %rb 
;inc %rc         ; else, count++
;jmp fibb1       ; loop
;fibb2:
;movb %rc, %ra   ; copy array length to ra
;dec %rc
;fibb3:
;pop %rd         ; pop fib value to rd
;movw %rd, %r0(%di, 16)  ; write rd to array[index]
;inc %r0         ; index++
;dec %rc         ; count--
;jnz fibb3       ; while(count > 0), repeat
;pop %r0
;pop %rd
;pop %rc
;pop %rb
;ret
;
;
;
;